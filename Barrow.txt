using System;
using System.Linq;
using System.Web.Mvc;
using MyLibrary.Models;
using System.Data.Entity;
using System.Net;
using MyLibrary.ADClasses;

namespace MyLibrary.Controllers
{
    public class BorrowBookController : Controller
    {
        private I_CoposEntities db = new I_CoposEntities();
        UserInfo user = new UserInfo();

        // Aceasta este acțiunea pentru afișarea cărților împrumutate de către utilizator
        public ActionResult MyBorrowedBooks()
        {
            if (user.isLoggedIn())
            {
                // Obține lista de cărți împrumutate din baza de date
                var borrowedBooks = db.Barrows.ToList();

                // Formatează datele pentru afișare, inclusiv data de împrumut și data de returnare
                foreach (var book in borrowedBooks)
                {
                    book.BorrowDateFormated = book.BorrowDate.HasValue
                        ? book.BorrowDate.Value.ToString("yyyy-MM-dd HH:mm:ss")
                        : "Not returned yet";
                    book.ReturnDateFormatted = book.ReturnDate.HasValue
                        ? book.ReturnDate.Value.ToString("yyyy-MM-dd HH:mm:ss")
                        : "Not returned yet";
                }

                // Returnează o vizualizare care afișează cărțile împrumutate
                return View(borrowedBooks);
            }
            else
            {
                // Redirecționează utilizatorul către pagina de autentificare
                return RedirectToAction("LoginPage", "Account");
            }
        }

        // Aceasta este acțiunea pentru returnarea unei cărți
        public ActionResult ReturnBook(int BorrowedBookId)
        {
            var borrowedBook = db.Barrows.Find(BorrowedBookId);

            // Verifică dacă cartea există, nu este încă validată și are o dată de returnare
            if (borrowedBook != null && !borrowedBook.IsValidated && borrowedBook.ReturnDate.HasValue && (borrowedBook.IsReturned == false))
            {
                // Actualizează data de returnare la data curentă
                borrowedBook.ReturnDate = DateTime.Now;

                // Setează IsReturned la true pentru a marca că cartea a fost returnată
                borrowedBook.IsReturned = true;

                // Salvează modificările în baza de date
                db.SaveChanges();

                // Actualizează și cantitatea disponibilă pentru această carte
                var bookAvailable = db.BooksAvailables.FirstOrDefault(b => b.Isbn13 == borrowedBook.BookISBN);
                if (bookAvailable != null)
                {
                    bookAvailable.QtyAvailable++;
                    db.SaveChanges();
                }
            }

            // Redirecționează utilizatorul înapoi la lista sa de cărți împrumutate
            return RedirectToAction("MyBorrowedBooks");
        }

        // Aceasta este acțiunea pentru validarea returnării unei cărți
        public ActionResult ValidateReturn(int BorrowedBookId)
        {
            var borrowedBook = db.Barrows.Find(BorrowedBookId);

            // Găsește cartea împrumutată după ID și o marchează ca validată
            if (borrowedBook != null)
            {
                borrowedBook.IsValidated = true;
                db.SaveChanges();
            }

            // Redirecționează utilizatorul înapoi la lista sa de cărți împrumutate
            return RedirectToAction("MyBorrowedBooks");
        }

        [HttpGet]
        // Aceasta este acțiunea pentru afișarea formularului de împrumut
        public ActionResult Borrow()
        {
            ViewBag.ErrorMessage = TempData["ErrorMessage"];
            ViewBag.SuccessMessage = TempData["SuccessMessage"];
            return View();
        }

        [HttpPost]
        // Aceasta este acțiunea pentru procesarea împrumutului de carte
        public ActionResult Borrow(string isbn13)
        {
            var book = db.BooksAvailables.FirstOrDefault(b => b.Isbn13 == isbn13);

            if (user.isLoggedIn())
            {
                string currentUserId = getUserName();

                // Verifică disponibilitatea cărții
                if (book.QtyAvailable > 0)
                {
                    book.QtyAvailable--;

                    // Creează o înregistrare în baza de date pentru cartea împrumutată
                    Barrow borrowedBook = new Barrow
                    {
                        UserId = currentUserId,
                        BookName = book.BookName,
                        BookISBN = book.Isbn13,
                        BorrowDate = DateTime.Now,
                        ReturnDate = DateTime.Now.AddDays(14)
                    };

                    // Adaugă cartea împrumutată în baza de date
                    db.Barrows.Add(borrowedBook);
                    db.SaveChanges();

                    TempData["SuccessMessage"] = "The book has been borrowed successfully!";
                }
                else
                {
                    TempData["ErrorMessage"] = "The book is not available for loan.";
                }

                // Redirecționează utilizatorul înapoi la lista sa de cărți împrumutate
                return RedirectToAction("MyBorrowedBooks");
            }
            else
            {
                // Redirecționează utilizatorul către pagina de autentificare
                return RedirectToAction("LoginPage", "Account");
            }
        }

        // Aceasta este o metodă pentru a obține numele utilizatorului
        public string getUserName()
        {
            UserInfo user = new UserInfo();
            return user.getUsername();
        }
    }
}







viewul

@model List<MyLibrary.Models.Barrow>

@{
    ViewBag.Title = "My Borrowed Books";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>My Borrowed Books</h2>

@if (!string.IsNullOrEmpty(TempData["ErrorMessage"] as string))
{
    <div class="alert alert-danger"> @TempData["ErrorMessage"]</div>
}

@if (!string.IsNullOrEmpty(TempData["SuccessMessage"] as string))
{
    <div class="alert alert-success"> @TempData["SuccessMessage"]</div>
}

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>UserName</th>
            <th>BookName</th>
            <th>ISBN</th>
            <th>BorrowDate</th>
            <th>ReturnDate</th>
            <th>IsReturned</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var book in Model)
        {
            <tr>
                <td>@book.BorrowedBookId</td>
                <td>@book.UserId</td>
                <td>@book.BookName</td>
                <td>@book.BookISBN</td>
                <td>@book.BorrowDateFormated</td>
                <td>
                    @if (book.ReturnDate.HasValue)
                    {
                        @book.ReturnDateFormatted
                    }
                    else
                    {
                        <text>Not returned yet</text>
                    }
                </td>
                <td>
                    @if (book.IsReturned.GetValueOrDefault())
                    {
                        <text>Yes</text>
                    }
                    else
                    {
                        <text>No</text>
                    }
                </td>
                <td>
                    @if (!book.ReturnDate.HasValue || !book.IsValidated || book.IsReturned.GetValueOrDefault())
                    {
                        <text>You've already returned this book</text>
                    }
                    else
                    {
                        <a href="@Url.Action("ReturnBook", "BorrowBook", new { BorrowedBookId = book.BorrowedBookId })" class="btn btn-primary">Return book</a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
 