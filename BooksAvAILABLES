using MyLibrary.Models;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;

namespace MyLibrary.Controllers
{
    public class BooksAvailableController : Controller
    {
        private I_CoposEntities db = new I_CoposEntities();
        UserInfo user = new UserInfo();

        // Acțiunea pentru afișarea listei de cărți disponibile
        public ActionResult Index()
        {
            // Afisează lista de cărți disponibile
            return View(db.BooksAvailables.OrderBy(p => p.Author).Distinct().ToList());
        }

        // Acțiunea pentru a vedea detalii despre o carte
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            BooksAvailable booksavailable = db.BooksAvailables.Find(id);
            if (booksavailable == null)
            {
                return HttpNotFound();
            }
            return View(booksavailable);
        }

        // Acțiunea pentru împrumutarea unei cărți
        public ActionResult Borrow(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            var book = db.BooksAvailables.Find(id);
            if (book == null || book.QtyAvailable <= 0)
            {
                return HttpNotFound();
            }

            // Verifică dacă utilizatorul este autentificat
            if (user.isLoggedIn())
            {
                string currentUserId = getUserName();

                // Actualizează cantitatea disponibilă
                book.QtyAvailable--;

                // Creează o înregistrare în tabelul Barrows pentru împrumut
                Barrow borrowedBook = new Barrow
                {
                    UserId = currentUserId,
                    BookName = book.BookName,
                    BookISBN = book.Isbn13,
                    BorrowDate = DateTime.Now,
                    ReturnDate = DateTime.Now.AddDays(14) // Setează data de returnare la 14 zile de la data curentă
                };

                db.Barrows.Add(borrowedBook);
                db.SaveChanges();

                TempData["SuccessMessage"] = "The book has been borrowed successfully!";
            }
            else
            {
                return RedirectToAction("LoginPage", "Account"); // Redirecționează utilizatorul către pagina de autentificare
            }

            return RedirectToAction("Index"); // Redirecționează utilizatorul înapoi la lista de cărți disponibile
        }

        // Metodă pentru a obține numele utilizatorului
        public string getUserName()
        {
            UserInfo user = new UserInfo();
            return user.getUsername();
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}







@using MyLibrary.ADClasses
@{ var usrData = new UserInfo();}

@model IEnumerable<MyLibrary.Models.BooksAvailable>

@{
    ViewBag.Title = "Index";
}

<h2>Books Availables</h2>

<table class="table table-bordered table-sm shadow">
    <tr class="">
        <th>
            @Html.DisplayNameFor(model => model.BookName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Author)
        </th>

        <th>
            @Html.DisplayNameFor(model => model.Isbn13)
        </th>

        <th>
            @if (usrData.checkIfUserIsAdmin())
            {
                @Html.DisplayNameFor(model => model.Isbn10)
            }  
        </th>

        <th>
            @Html.DisplayNameFor(model => model.Publisher)
        </th>

        <th>
            @Html.DisplayNameFor(model => model.YearPublished)
        </th>

        <th>
            @Html.DisplayNameFor(model => model.CoverImage)
        </th>

        <th>
            @if (usrData.checkIfUserIsAdmin())
            {
                @Html.DisplayNameFor(model => model.QtyAvailable)
            }
        </th>

        <th>Action</th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.BookName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Author)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Isbn13)
            </td>

            <td>
                @if (usrData.checkIfUserIsAdmin())
                {
                    @Html.DisplayFor(modelItem => item.Isbn10)
                }
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.Publisher)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.YearPublished)
            </td>
            <td>
                <img src="@item.CoverImage" class="img-thumbnail" alt="" width="50" height="150" />
            </td>

            <td>
                @if (usrData.checkIfUserIsAdmin())
                {
                    @Html.DisplayFor(modelItem => item.QtyAvailable)
                }
            </td>

            <td>
                @Html.ActionLink("Details", "Details", new { id = item.id }, new { @class = "btn btn-success btn-sm" })

                @if (item.QtyAvailable > 0)
                {
                    @Html.ActionLink("Borrow", "Borrow", "BooksAvailable", new { id = item.id }, new { @class = "btn btn-primary btn-sm" })
                }
                else
                {
                    @Html.ActionLink("Waitlist", "Join", "WaitList", new { id = item.id }, new { @class = "btn btn-warning btn-sm" })
                }
            </td>
        </tr>
    }
</table>





